@page "/tax_payers"

@using TaxPayersMRA.Data
@inject TaxPayerService TaxPayerService
@inject SessionManager SessionManager
@inject NavigationManager NavManager 

<h5>Tax Payers</h5>

<p>@result</p>

@if (taxPayers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <a href="/add_tax_payer" type="button" class="btn btn-primary">Add Tax Payer</a>
    <table class="table">
        <thead>
            <tr>
                <th>Business Registration Date</th>
                <th>Mobile Number</th>
                <th>Business Certificate Number</th>
                <th>Trading Name</th>
                <th>TPIN</th>
                <th>Physical Location</th>
            </tr>
        </thead>
        <tbody>
            @if (taxPayers.Count == 0)
            {
                <tr>
                    No data in the table
                </tr>
            }
            else
            {
                @foreach (var taxPayer in taxPayers)
                {
                    <tr>
                        <td>@taxPayer.BusinessRegistrationDate</td>
                        <td>@taxPayer.MobileNumber</td>
                        <td>@taxPayer.BusinessCertificateNumber</td>
                        <td>@taxPayer.TradingName</td>
                        <td>@taxPayer.TPIN</td>
                        <td>@taxPayer.PhysicalLocation</td>
                        <td>
                            <button class="btn btn-link" @onclick="@(e => EditTaxPayer(taxPayer))">Edit</button> |
                            <button class="btn btn-link" @onclick="@(e => DeleteTaxPayer(taxPayer))">Delete</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    private List<TaxPayer> taxPayers;

    private string result = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetAllAsync();
        }
        catch (Exception e)
        {
            System.Diagnostics.Debug.WriteLine(e);
        }
    }

    protected async Task GetAllAsync()
    {
        try
        {
            taxPayers = await TaxPayerService.GetTaxPayersAsync();
        }
        catch (Exception e)
        {
            System.Diagnostics.Debug.WriteLine(e);
        }
    }

    private void DeleteTaxPayer(TaxPayer taxPayer)
    {
        SessionManager.SetTaxPayer(taxPayer);

        NavManager.NavigateTo("/delete_tax_payer");
    }

    private void EditTaxPayer(TaxPayer taxPayer)
    {
        SessionManager.SetTaxPayer(taxPayer);

        NavManager.NavigateTo("/edit_tax_payer");
    }
}
